{"tagline":"Micro ORM","body":"# Hop #\r\n## Usage ##\r\nHop works as an extension to IDbConnection. It propagates as one extension method 'Hop()' which returns an IHop instance.\r\nThe IHop interface in it's turn has basic CRUD extension methods defined. This approach keeps the 'true' IDbConnection members clean, and separates all the extensions to an external helper class.\r\n\r\n### Dynamic Schema creation ###\r\nHop will dynamically create tables/columns when it is possible/needed. This only works for value typed columns (except System.String). Hop will try to infer a primary key by searching for a property named Id, or a property decorated with IdAttribute. All the beheviour in this matter can be modified by overriding the service-methods in HopBase.\r\n\r\n### Read ###\r\n\r\nThe basic usage of the Read extension methods is as follows:\r\n\r\n    GetSqlConnection().Hop().ReadAll<Beer>();\r\n    GetSqlConnection().Hop().Read<Beer>(\"Name = 'Jupiler'\")\r\n\r\nTo refresh an existing instance (given the Id property is valid)\r\n\r\n    GetSqlConnection().Hop().Read(existingBeerInstance);\r\n\r\n#### How it works\r\n\r\nHop works by generating type specific code when it comes to Materializing a DataReader instance. This means the lib generates IL opcodes that represent a class deriving from the generic Materializer<T> class. In this way we can reduce Reflection costs for Read operations.\r\n\r\n#### Extra: Read to Tuple<> ####\r\n\r\nIn Hop, it is possible to do a read to Tuples:\r\n\r\n    GetSqlConnection().Hop().ReadTuples<Tuple<int, string>, Beer>(\"Id, Name\");\r\n\r\n### Insert ###\r\n\r\n    GetSqlConnection().Hop().InsertSingle(new Beer() { Name = \"Petrus\" });\r\n\r\n#### How it works ####\r\n  \r\nInserting works by generating a SQL script which will insert the correct values to the database. In the same script the current Identity is retrieved, and the Id properties of the instances are updated to the correct value.\r\n\r\n### Update ###\r\n\r\nUpdate method works as expected:\r\n\r\n    var beer = Beers.FirstOrDefault();\r\n    beer.Name = \"Heineken\";\r\n    \r\n    GetSqlConnection().Hop().UpdateSingle(beer);\r\n\r\n### Delete ###\r\n\r\nSo does the delete method:\r\n\r\n    //this line actually deletes all records from the beer table\r\n    GetSqlConnection().Hop().Delete<Beer>();\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Hop","google":""}